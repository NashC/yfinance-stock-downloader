---
description: 
globs: 
alwaysApply: true
---
# Enhanced Multi-Source Stock Price Data Downloader

## Project Overview
This project downloads historical stock price data from Yahoo Finance supporting **any CSV files containing ticker symbols**. The system has been completely generalized and is no longer limited to specific hardcoded files.

## Modern Python Setup
This project uses modern Python packaging standards:
- **Package Manager**: [uv](mdc:https:/github.com/astral-sh/uv) for fast dependency management
- **Configuration**: `pyproject.toml` following PEP 518/621 standards
- **Command-line Tool**: Flexible CLI with multiple usage modes
- **Development Tools**: Black, isort, mypy, pytest, ruff for code quality

## Key Files Structure

### Main Script & Package
- [main.py](mdc:main.py) - Enhanced CLI with auto-discovery, JSON config, and legacy modes
- [src/downloader.py](mdc:src/downloader.py) - Generalized multi-source downloader with robust error handling
- [src/config.py](mdc:src/config.py) - Flexible configuration system with auto-discovery and JSON support
- [src/validators.py](mdc:src/validators.py) - Ticker and data validation utilities
- [pyproject.toml](mdc:pyproject.toml) - Modern Python packaging configuration

### Configuration & Data
- [config.json](mdc:config.json) - Sample JSON configuration (auto-generated)
- [data/](mdc:data) - Input CSV files (auto-discovered)
- [requirements.txt](mdc:requirements.txt) - Legacy dependency file (maintained for compatibility)
- [requirements.lock](mdc:requirements.lock) - Pinned dependency versions for reproducible builds

### Testing & Documentation
- [tests/test_downloader.py](mdc:tests/test_downloader.py) - Comprehensive test suite
- [README.md](mdc:README.md) - Complete documentation with usage examples
- [.gitignore](mdc:.gitignore) - Comprehensive ignore patterns

### Output Structure
- `output/` - Organized output directories (configurable)
  - `source1_data/` - Individual CSV files per ticker
  - `source2_data/` - Separate directories per data source
  - `logs/` - Execution logs with detailed progress tracking

## Key Features
- **üîç Auto-Discovery** - Automatically detects CSV files and ticker columns
- **üìÑ JSON Configuration** - Flexible configuration for complex setups
- **üîÑ Legacy Compatibility** - 100% backward compatible with original hardcoded sources
- **üéØ Selective Processing** - Process specific sources or all available
- **üìä Real-time Progress** - Progress bars and comprehensive logging
- **üîÅ Resume Capability** - Automatically skips already downloaded files
- **‚úÖ Data Validation** - Validates ticker symbols and data quality
- **üèóÔ∏è Modular Architecture** - Clean separation with organized packages
- **‚ö° Intelligent Rate Limiting** - Respects Yahoo Finance API limits
- **üß™ Comprehensive Testing** - Full test suite with multiple scenarios

## Usage Modes

### 1. Auto-Discovery (Default)
```bash
.venv/bin/python main.py
```
- Scans `data/` directory for CSV files
- Auto-detects ticker columns
- Creates organized output directories

### 2. JSON Configuration
```bash
.venv/bin/python main.py --config config.json
```
- Fully customizable through JSON
- Supports filtering, custom outputs, descriptions

### 3. Legacy Mode (Backward Compatible)
```bash
.venv/bin/python main.py --legacy
```
- Uses original hardcoded configuration
- Maintains exact same behavior as before

### 4. Selective Processing
```bash
.venv/bin/python main.py --sources etf_list
```
- Process only specified sources
- Command-line overrides for quick adjustments

## Installation & Usage

### Modern Setup with uv (Recommended)
1. **Install uv**: `curl -LsSf https://astral.sh/uv/install.sh | sh`
2. **Create virtual environment**: `uv venv`
3. **Activate**: `source .venv/bin/activate`
4. **Install project**: `uv pip install -e .`

### Running the Application
```bash
# Auto-discover and process all CSV files
.venv/bin/python main.py

# Create sample configuration
.venv/bin/python main.py --create-config

# Use custom configuration
.venv/bin/python main.py --config config.json

# Legacy mode (original behavior)
.venv/bin/python main.py --legacy

# Process specific sources
.venv/bin/python main.py --sources etf_list
```

## Development Tools Configuration
The [pyproject.toml](mdc:pyproject.toml) includes configuration for:
- **Black**: Code formatting (88 char line length)
- **isort**: Import sorting (compatible with Black)
- **mypy**: Type checking with strict settings
- **pytest**: Testing framework
- **ruff**: Fast Python linter
- **bandit**: Security linting
