---
description: 
globs: 
alwaysApply: true
---
# Configuration Guide

## Main Configuration Section
All key settings are located at the top of [download_stock_price_data.py](mdc:download_stock_price_data.py) in the `CONFIGURATION` section.

## Project Configuration Files
- **[pyproject.toml](mdc:pyproject.toml)** - Modern Python packaging configuration with dependencies, dev tools, and entry points
- **[requirements.txt](mdc:requirements.txt)** - Legacy dependency file (maintained for compatibility)
- **[requirements.lock](mdc:requirements.lock)** - Pinned dependency versions for reproducible builds

## Data Source Configuration
The `DATA_SOURCES` dictionary defines available data sources:

```python
DATA_SOURCES = {
    "iwb_holdings": {
        "file": "IWB_holdings_250529.csv",
        "ticker_column": "Ticker",
        "description": "IWB Russell 1000 Holdings (Individual Stocks)",
        "output_dir": "stock_data",
        "enabled": True
    },
    "etf_list": {
        "file": "etf_list.csv", 
        "ticker_column": "Symbol",
        "description": "ETF Universe",
        "output_dir": "etf_data",
        "enabled": True
    }
}
```

## Processing Mode Options
- `PROCESSING_MODE = "both"` - Download both stocks and ETFs
- `PROCESSING_MODE = "stocks"` - Download only individual stocks
- `PROCESSING_MODE = "etfs"` - Download only ETFs
- `PROCESSING_MODE = "auto"` - Auto-detect available sources

## Date Range Settings
- `START_DATE = "2000-01-01"` - Historical data start date
- `END_DATE = None` - End date (None = today, or specify "YYYY-MM-DD")

## Performance Tuning
- `CHUNK_SIZE = 25` - Number of tickers per batch download
- `SLEEP_BETWEEN_CHUNKS = 10` - Seconds between chunk requests
- `INDIVIDUAL_SLEEP = 3` - Seconds between individual downloads

## Retry Logic
- `MAX_RETRIES = 3` - Maximum retry attempts per ticker/chunk
- `INITIAL_BACKOFF = 2` - Initial backoff time in seconds (exponential: 2→4→8)

## Data Validation
- `MIN_DATA_POINTS = 10` - Minimum data points to consider valid
- `VALID_TICKER_PATTERN` - Regex pattern for ticker validation

## Adding New Data Sources
To add a new CSV data source, extend the `DATA_SOURCES` dictionary:

```python
DATA_SOURCES["new_source"] = {
    "file": "new_data.csv",
    "ticker_column": "Symbol",  # Column name containing tickers
    "description": "New Data Source Description",
    "output_dir": "new_output_dir",
    "enabled": True
}
```

## Environment Setup

### Modern Setup with uv (Recommended)
1. **Install uv**: `curl -LsSf https://astral.sh/uv/install.sh | sh`
2. **Create virtual environment**: `uv venv`
3. **Activate**: `source .venv/bin/activate`
4. **Install project**: `uv pip install -e .`

### Alternative Installation Methods
```bash
# Install dependencies only
uv pip install -r requirements.txt

# Use lock file for exact reproducibility
uv pip sync requirements.lock

# Install with development tools
uv pip install -e ".[dev]"
```

### Legacy Setup
1. Create virtual environment: `python3 -m venv venv`
2. Activate: `source venv/bin/activate`
3. Install dependencies: `pip install -r requirements.txt`

## Running the Application

### Command-Line Tool (Recommended)
```bash
download-stock-data
```

### Direct Python Execution
```bash
python download_stock_price_data.py
```

## Development Tools Configuration
The [pyproject.toml](mdc:pyproject.toml) includes configuration for:
- **Black**: Code formatting (88 char line length)
- **isort**: Import sorting (compatible with Black)
- **mypy**: Type checking with strict settings
- **pytest**: Testing framework
- **ruff**: Fast Python linter
- **bandit**: Security linting
