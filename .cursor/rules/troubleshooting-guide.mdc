---
description: 
globs: 
alwaysApply: true
---
# Troubleshooting Guide

## Common Issues & Solutions

### Environment Issues

**Problem**: `command not found: python`
**Solution**: Use `python3` or activate virtual environment
```bash
# Modern setup with uv (recommended)
uv venv
source .venv/bin/activate
uv pip install -e .

# Legacy setup
python3 -m venv venv
source venv/bin/activate
pip install -r requirements.txt
```

**Problem**: Missing dependencies
**Solution**: Install using modern uv workflow
```bash
# Recommended: Install project with all dependencies
uv pip install -e .

# Alternative: Install from requirements
uv pip install -r requirements.txt

# For exact reproducibility
uv pip sync requirements.lock

# Legacy pip method
pip install pandas yfinance tqdm
```

**Problem**: `uv` command not found
**Solution**: Install uv package manager
```bash
curl -LsSf https://astral.sh/uv/install.sh | sh
# Then restart terminal or source shell profile
```

### Configuration Issues

**Problem**: No data sources found
**Solution**: Check configuration method and file locations
```bash
# Test auto-discovery
.venv/bin/python main.py

# Check what files are detected
.venv/bin/python -c "from src.config import ConfigLoader; ConfigLoader.auto_discover_csv_files('data')"

# Create sample configuration
.venv/bin/python main.py --create-config

# Use legacy mode
.venv/bin/python main.py --legacy
```

**Problem**: `Column 'Ticker' not found` or `Column 'Symbol' not found`
**Solution**: 
- **Auto-discovery**: Ensure CSV has recognizable ticker column names (`ticker`, `symbol`, `Ticker`, `Symbol`)
- **JSON config**: Verify `ticker_column` matches actual column name in CSV
- **Check columns**: `python -c "import pandas as pd; print(pd.read_csv('data/your_file.csv').columns.tolist())"`

**Sample CSV format**:
```csv
Ticker,Name,Sector
AAPL,Apple Inc,Technology
MSFT,Microsoft Corp,Technology
```

### CSV Format Issues

**Problem**: CSV file not detected by auto-discovery
**Solution**: 
- Ensure file is in `data/` directory (or specified directory)
- Check ticker column has recognizable name
- Verify CSV has header row
- Test with specific configuration:

```json
{
  "data_sources": {
    "my_data": {
      "file": "data/my_file.csv",
      "ticker_column": "Your_Column_Name",
      "description": "My Custom Data",
      "output_dir": "output/my_data",
      "enabled": true
    }
  }
}
```

**Problem**: Invalid ticker symbols
**Solution**: 
- Script automatically validates and skips invalid tickers
- Check logs for details on which tickers were filtered
- Common invalid patterns: empty cells, non-alphanumeric characters, too long/short

### Network & API Issues

**Problem**: Download failures or timeouts
**Solution**: 
- Check internet connection
- Script includes automatic retry logic with exponential backoff
- Some tickers may be delisted or invalid (normal)
- Increase sleep times for rate limiting:

```bash
# More conservative rate limiting
.venv/bin/python main.py --chunk-size 10 --sleep 10
```

**Problem**: Yahoo Finance API errors
**Solution**:
- Temporary API issues usually resolve automatically
- Script retries failed tickers individually
- Check logs for specific errors
- Try smaller chunk sizes:

```bash
# Smaller chunks for better reliability
.venv/bin/python main.py --chunk-size 5 --sleep 5
```

### Performance Issues

**Problem**: Downloads too slow
**Solution**: Adjust performance settings:
```bash
# Faster processing (higher API usage)
.venv/bin/python main.py --chunk-size 50 --sleep 2

# Or edit JSON configuration
{
  "chunk_size": 50,
  "sleep_between_chunks": 2,
  "individual_sleep": 1
}
```

**Problem**: Too many failures
**Solution**:
```bash
# More conservative settings
.venv/bin/python main.py --chunk-size 5 --sleep 10

# Or increase retry attempts
{
  "max_retries": 5,
  "initial_backoff": 3
}
```

### Command-Line Issues

**Problem**: Command not found or import errors
**Solution**: 
- Ensure virtual environment is activated: `source .venv/bin/activate`
- Use full Python path: `.venv/bin/python main.py`
- Reinstall project: `uv pip install -e .`
- Check dependencies: `uv pip list`

**Problem**: Configuration file not found
**Solution**:
```bash
# Create sample configuration
.venv/bin/python main.py --create-config

# Check current directory
pwd

# Use absolute path
.venv/bin/python main.py --config /full/path/to/config.json
```

### Auto-Discovery Issues

**Problem**: CSV files not detected
**Solution**:
```bash
# Test auto-discovery manually
.venv/bin/python -c "
from src.config import ConfigLoader
config = ConfigLoader.auto_discover_csv_files('data')
print('Found sources:', list(config.data_sources.keys()))
for name, source in config.data_sources.items():
    print(f'  {name}: {source.file} (column: {source.ticker_column})')
"

# Check directory contents
ls -la data/

# Verify CSV format
head -5 data/your_file.csv
```

**Problem**: Wrong ticker column detected
**Solution**: Use JSON configuration for precise control:
```json
{
  "data_sources": {
    "my_source": {
      "file": "data/my_file.csv",
      "ticker_column": "Exact_Column_Name",
      "description": "My Data Source",
      "output_dir": "output/my_data",
      "enabled": true
    }
  }
}
```

## Log Analysis

### Log File Locations
- **Default**: `stock_download.log` (configurable)
- **Test logs**: `tests/logs/test_download.log`
- **Custom**: Specify with `--log-file` or in JSON config

### Key Log Patterns

**Successful Auto-Discovery**:
```
INFO | üîç Auto-discovering CSV files in 'data' directory...
INFO | ‚úì Auto-discovered: etf_list.csv (ticker column: Symbol)
INFO | ‚úì Auto-discovered: IWB_holdings_250529.csv (ticker column: Ticker)
```

**Successful Processing**:
```
INFO | ‚úì Saved MSFT: 6234 data points to MSFT.csv
INFO | ‚úì Chunk completed: 25 successful, 0 failed
```

**Failed Downloads**:
```
WARNING | Empty data returned for INVALID_TICKER
ERROR | ‚úó Failed to download TICKER after 3 attempts: [error details]
```

**Configuration Issues**:
```
ERROR | Column 'WrongColumn' not found in data/file.csv. Available: ['Ticker', 'Name', 'Sector']
WARNING | File not found: data/missing_file.csv - skipping source
```

**Final Summary**:
```
INFO | COMPREHENSIVE DOWNLOAD SUMMARY
INFO | Total successful downloads: 1266
INFO | Overall success rate: 99.6%
```

## Data Validation Issues

**Problem**: Empty or insufficient data
**Solution**: 
- Script validates minimum data points (default: 10)
- Some tickers may have limited historical data
- Check ticker validity on Yahoo Finance manually
- Adjust minimum data points:

```json
{
  "min_data_points": 5
}
```

**Problem**: Missing OHLCV columns
**Solution**: 
- Script validates required columns automatically
- Some tickers may not have complete data
- Failed validations are logged and skipped
- Check Yahoo Finance data availability

## Resume Capability

**Feature**: Script automatically skips already downloaded files
**Location**: Checks existing files in output directories

**To Force Re-download**: 
```bash
# Delete specific ticker files
rm output/source_data/AAPL.csv

# Delete entire source directory
rm -rf output/source_data/

# Or use different output directory
.venv/bin/python main.py --output-dir new_output
```

## Configuration Debugging

### Test Different Configuration Methods
```bash
# 1. Test auto-discovery
.venv/bin/python main.py

# 2. Test legacy mode
.venv/bin/python main.py --legacy

# 3. Test JSON configuration
.venv/bin/python main.py --create-config
.venv/bin/python main.py --config config.json

# 4. Test specific sources
.venv/bin/python main.py --sources etf_list
```

### Validate CSV Files
```bash
# Check CSV structure
python -c "
import pandas as pd
df = pd.read_csv('data/your_file.csv')
print('Columns:', df.columns.tolist())
print('Shape:', df.shape)
print('First few rows:')
print(df.head())
"

# Check for ticker column variations
python -c "
import pandas as pd
df = pd.read_csv('data/your_file.csv')
ticker_cols = [col for col in df.columns if 'ticker' in col.lower() or 'symbol' in col.lower()]
print('Potential ticker columns:', ticker_cols)
"
```

### Test Configuration Loading
```bash
# Test JSON configuration loading
python -c "
from src.config import ConfigLoader
try:
    config = ConfigLoader.from_json_file('config.json')
    print('‚úì Configuration loaded successfully')
    print('Sources:', list(config.data_sources.keys()))
except Exception as e:
    print('‚úó Configuration error:', e)
"
```

## Permission Issues

**Problem**: Cannot create output directories or files
**Solution**:
- Check write permissions in project directory
- Ensure sufficient disk space
- Run with appropriate user permissions
- Try different output directory:

```bash
# Use home directory
.venv/bin/python main.py --output-dir ~/stock_data

# Use temporary directory
.venv/bin/python main.py --output-dir /tmp/stock_data
```

## Development Environment Issues

**Problem**: Linting or formatting errors
**Solution**: Install development dependencies and run tools
```bash
# Install dev dependencies
uv pip install -e ".[dev]"

# Format code
black .
isort .

# Type checking
mypy src/

# Linting
ruff check .
```

## Migration Issues

**Problem**: Original behavior not working
**Solution**: Use legacy mode for exact original behavior
```bash
# Exact same behavior as original version
.venv/bin/python main.py --legacy
```

**Problem**: Want to use new features but maintain compatibility
**Solution**: Gradual migration approach
```bash
# 1. Test auto-discovery first
.venv/bin/python main.py --data-dir data --output-dir test_output

# 2. Create custom configuration
.venv/bin/python main.py --create-config

# 3. Customize configuration as needed
# Edit config.json

# 4. Use new configuration
.venv/bin/python main.py --config config.json
```

## Getting Help

### Debug Commands
```bash
# Test auto-discovery
.venv/bin/python -c "from src.config import ConfigLoader; ConfigLoader.auto_discover_csv_files('data')"

# Create sample config
.venv/bin/python main.py --create-config

# Test with minimal data
.venv/bin/python main.py --sources etf_list --chunk-size 2

# Check system info
.venv/bin/python -c "import sys; print('Python:', sys.version); import pandas; print('Pandas:', pandas.__version__)"
```

### Comprehensive Test
```bash
# Run full test suite
.venv/bin/python tests/test_downloader.py
```

### Step-by-Step Diagnosis
1. **Check environment**: Virtual environment activated and dependencies installed
2. **Test auto-discovery**: Verify CSV files are detected correctly
3. **Check logs**: Review detailed error messages in log files
4. **Try legacy mode**: Fall back to original behavior if needed
5. **Test with minimal data**: Use small datasets to isolate issues
6. **Check permissions**: Ensure read/write access to directories
7. **Verify network**: Test internet connection and API access

The system is designed to be robust and provide detailed error messages to help diagnose issues quickly!
